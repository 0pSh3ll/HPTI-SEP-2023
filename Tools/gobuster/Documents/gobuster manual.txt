-------------------------------------
         WHAT IS GOBUSTER
-------------------------------------
    Purpose: Gobuster is an open-source security tool with the primary purpose of enumerating or discovering directories and files on web servers and networked resources.

    Enumeration Technique: It uses a directory and file brute-forcing or enumeration technique. In this technique, Gobuster systematically makes HTTP or DNS requests with various directory and file names to check if they exist on the target server.

    Dictionary-Based Approach: Gobuster typically operates by using a wordlist or dictionary of potential directory and file names. It tests each entry in the dictionary to determine if it is present on the server. This approach helps identify hidden or unlinked resources.

    Custom Wordlists: Users can customize the wordlist according to their specific needs. They can provide their own wordlists or use predefined ones that come with Gobuster.

    Security Testing: Security professionals and ethical hackers often use Gobuster during penetration testing and security assessments to discover potential vulnerabilities and weaknesses in web applications and servers.

-------------------------------------
          HOW TO INSTALL
-------------------------------------

1) Open Terminal
2) Type Following Command : sudo apt update
3) Type Following Command : sudo apt upgrade
4) Type Following Command : sudo apt install gobuster

-------------------------------------
            HOW TO USE
-------------------------------------
Usage:
  gobuster [command]

Available Commands:
  completion  Generate the autocompletion script for the specified shell
  dir         Uses directory/file enumeration mode
  dns         Uses DNS subdomain enumeration mode
  fuzz        Uses fuzzing mode. Replaces the keyword FUZZ in the URL, Headers and the request body
  gcs         Uses gcs bucket enumeration mode
  help        Help about any command
  s3          Uses aws bucket enumeration mode
  tftp        Uses TFTP enumeration mode
  version     shows the current version
  vhost       Uses VHOST enumeration mode (you most probably want to use the IP address as the URL parameter)

Flags:
      --debug                 Enable debug output
      --delay duration        Time each thread waits between requests (e.g. 1500ms)
  -h, --help                  help for gobuster
      --no-color              Disable color output
      --no-error              Don't display errors
  -z, --no-progress           Don't display progress
  -o, --output string         Output file to write results to (defaults to stdout)
  -p, --pattern string        File containing replacement patterns
  -q, --quiet                 Don't print the banner and other noise
  -t, --threads int           Number of concurrent threads (default 10)
  -v, --verbose               Verbose output (errors)
  -w, --wordlist string       Path to the wordlist. Set to - to use STDIN.
      --wordlist-offset int   Resume from a given position in the wordlist (defaults to 0)

Use "gobuster [command] --help" for more information about a command.


-------------------------------------
             EXAMPLE
-------------------------------------

nikto -host testphp.vulnweb.com
- Nikto v2.5.0
---------------------------------------------------------------------------
+ Target IP:          44.228.249.3
+ Target Hostname:    testphp.vulnweb.com
+ Target Port:        80
+ Start Time:         2023-10-07 16:19:28 (GMT5.5)
---------------------------------------------------------------------------
+ Server: nginx/1.19.0
+ /: Retrieved x-powered-by header: PHP/5.6.40-38+ubuntu20.04.1+deb.sury.org+1.
+ /: The anti-clickjacking X-Frame-Options header is not present. See: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
+ /: The X-Content-Type-Options header is not set. This could allow the user agent to render the content of the site in a different fashion to the MIME type. See: https://www.netsparker.com/web-vulnerability-scanner/vulnerabilities/missing-content-type-header/
+ /clientaccesspolicy.xml contains a full wildcard entry. See: https://docs.microsoft.com/en-us/previous-versions/windows/silverlight/dotnet-windows-silverlight/cc197955(v=vs.95)?redirectedfrom=MSDN
+ /clientaccesspolicy.xml contains 12 lines which should be manually viewed for improper domains or wildcards. See: https://www.acunetix.com/vulnerabilities/web/insecure-clientaccesspolicy-xml-file/
+ /crossdomain.xml contains a full wildcard entry. See: http://jeremiahgrossman.blogspot.com/2008/05/crossdomainxml-invites-cross-site.html
